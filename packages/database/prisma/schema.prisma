datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  userId String @id @default(uuid()) @db.Uuid
  email String @unique
  name String
  icon String?
  createdAt DateTime @default(now())
  createdBy String
  updatedAt DateTime?
  updatedBy String?
  likes Post_Like[]
  follower Follower[]
}

model Follower {
  userId String @id @default(uuid()) @db.Uuid
  user User @relation(fields: [userId], references: [userId])
  createdAt DateTime @default(now())
  createdBy String
  updatedAt DateTime?
  updatedBy String?
}

model Post {
  postId String @id @default(uuid()) @db.Uuid
  title String
  detail String
  calorie Int
  difficulty Int
  materials Post_Material[]
  process Process[]
  hearts Post_Like[]
  createdAt DateTime @default(now())
  createdBy String
  updatedAt DateTime?
  updatedBy String?
}

model Post_Material {
  postMaterialId String @id @default(uuid()) @db.Uuid
  postId String @db.Uuid
  post Post @relation(fields: [postId], references: [postId])
  materialId String @db.Uuid
  quantity Int
  createdAt DateTime @default(now())
  createdBy String
  updatedAt DateTime?
  updatedBy String?
}

model Material {
  materialId String @id @default(uuid()) @db.Uuid
  name String
  createdAt DateTime @default(now())
  createdBy String
  updatedAt DateTime?
  updatedBy String?
}

model Process {
  uuid String @id @default(uuid()) @db.Uuid
  text String
  image String?
  postId String @db.Uuid
  post Post @relation(fields: [postId], references: [postId])
  createdAt DateTime @default(now())
  createdBy String
  updatedAt DateTime?
  updatedBy String?
}

model Post_Like {
  postLikeId String @id @default(uuid()) @db.Uuid
  userId String @db.Uuid
  user User @relation(fields: [userId], references: [userId])
  postId String @db.Uuid
  post Post @relation(fields: [postId], references: [postId])
  createdAt DateTime @default(now())
  createdBy String
  updatedAt DateTime?
  updatedBy String?
}